# Ensure the script runs with administrative privileges
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Error "This script must be run as Administrator. Exiting..."
    exit 1
}

# Install OpenSSH Server if not already installed
Write-Output "Checking if OpenSSH Server is installed..."
$sshFeature = Get-WindowsCapability -Online | Where-Object { $_.Name -like "OpenSSH.Server*" }

if ($sshFeature.State -ne "Installed") {
    Write-Output "OpenSSH Server is not installed. Installing..."
    Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
} else {
    Write-Output "OpenSSH Server is already installed."
}

# Start the OpenSSH Server service
Write-Output "Starting the OpenSSH Server service..."
Start-Service -Name "sshd" -ErrorAction Stop

# Set the service to start automatically
Write-Output "Setting the OpenSSH Server service to start automatically..."
Set-Service -Name "sshd" -StartupType Automatic

# Verify the service is running
$serviceStatus = Get-Service -Name "sshd"
if ($serviceStatus.Status -eq "Running") {
    Write-Output "OpenSSH Server is running."
} else {
    Write-Error "Failed to start OpenSSH Server. Please check the service logs."
}

# Enable the firewall rule for SSH
Write-Output "Enabling the firewall rule for SSH..."
$firewallRule = Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue
if ($firewallRule) {
    Enable-NetFirewallRule -Name "OpenSSH-Server-In-TCP"
    Write-Output "Firewall rule for SSH is enabled."
} else {
    Write-Warning "Firewall rule for SSH not found. You may need to configure it manually."
}

Write-Output "SSH setup is complete. You can now connect to this machine using SSH."
